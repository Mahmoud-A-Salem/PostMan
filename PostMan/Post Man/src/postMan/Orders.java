package postMan;

import graphdijkstra.Map;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static postMan.Login.query;
import static postMan.Login.rs;
import static postMan.Login.ss;
import static postMan.Login.username;

/**
 *
 * @author Mahmoud
 */
public class Orders extends javax.swing.JFrame {

    /**
     * Creates new form Locations
     */
    public Orders() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BG = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        AddLocation = new javax.swing.JButton();
        Done = new javax.swing.JButton();
        OrdTable_SP = new javax.swing.JScrollPane();
        OrdTable = new javax.swing.JTable();
        Delete = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        BG.setBackground(new java.awt.Color(0, 204, 255));

        Title.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setText("Orders History");

        AddLocation.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        AddLocation.setText("Add New Order");
        AddLocation.setFocusable(false);
        AddLocation.setRequestFocusEnabled(false);
        AddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLocationActionPerformed(evt);
            }
        });

        Done.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        Done.setText("Done");
        Done.setFocusable(false);
        Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneActionPerformed(evt);
            }
        });

        OrdTable.getTableHeader().setReorderingAllowed( false );
        OrdTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Destination", "Distance", "Arrival_Time", "Order_ID", "Order_Status"
            }
        )
        {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        }
    );
    OrdTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    OrdTable.setFocusable(false);
    OrdTable.setRequestFocusEnabled(false);
    OrdTable.setShowGrid(true);
    OrdTable_SP.setViewportView(OrdTable);

    Delete.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
    Delete.setText("Delete");
    Delete.setFocusable(false);
    Delete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DeleteActionPerformed(evt);
        }
    });

    cmdBack.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
    cmdBack.setText("Back");
    cmdBack.setFocusable(false);
    cmdBack.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdBackActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout BGLayout = new javax.swing.GroupLayout(BG);
    BG.setLayout(BGLayout);
    BGLayout.setHorizontalGroup(
        BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BGLayout.createSequentialGroup()
            .addGap(35, 35, 35)
            .addComponent(AddLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
            .addComponent(cmdBack, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(42, 42, 42)
            .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(44, 44, 44)
            .addComponent(Done, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(20, 20, 20))
        .addGroup(BGLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(OrdTable_SP)
            .addContainerGap())
        .addGroup(BGLayout.createSequentialGroup()
            .addGap(314, 314, 314)
            .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    BGLayout.setVerticalGroup(
        BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(BGLayout.createSequentialGroup()
            .addGap(9, 9, 9)
            .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(OrdTable_SP, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
            .addGroup(BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(AddLocation)
                .addComponent(Done)
                .addComponent(Delete)
                .addComponent(cmdBack))
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(BG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            DefaultTableModel ordTable = (DefaultTableModel) OrdTable.getModel();
            ordTable.setRowCount(0);
            query = "SELECT Orders.Destination, Orders.Distance, Orders._Time, Orders.Order_ID, Orders.Order_Status\n"
                    + "FROM Orders Where Orders.username = '" + username.getText().trim() + "'";
            rs = ss.executeQuery(query);
            while (rs.next()) {
                String Destination = rs.getString("Destination");
                String Distance = rs.getString("Distance");
                String Time = rs.getString("_Time");
                String Order_ID = rs.getString("Order_ID");
                String Order_Status = rs.getString("Order_Status");
                String Data[] = {Destination, Distance, Time, Order_ID, Order_Status};
                ordTable.addRow(Data);
            }
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(null, "Error Message: " + e);
        }
    }//GEN-LAST:event_formWindowOpened

    private void AddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLocationActionPerformed
        // TODO add your handling code here:
        dispose();
        Map mp = new Map();
        mp.setVisible(true);
    }//GEN-LAST:event_AddLocationActionPerformed

    private void DoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneActionPerformed
        // TODO add your handling code here:
        if (OrdTable.isRowSelected(OrdTable.getSelectedRow())) {
            Object Order_Status = OrdTable.getValueAt(OrdTable.getSelectedRow(), 3);
            query = "UPDATE Orders\n"
                    + "SET Order_Status = 'Done Order'\n"
                    + "WHERE Order_ID = '" + Order_Status + "';";
            try {
                ss.execute(query);
            } catch (SQLException ex) {
                Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
            }
            dispose();
            OnWay ow = new OnWay();
            ow.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Order");
        }
    }//GEN-LAST:event_DoneActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        if (OrdTable.isRowSelected(OrdTable.getSelectedRow())) {
            Object Order_ID = OrdTable.getValueAt(OrdTable.getSelectedRow(), 3);
            DefaultTableModel ordTable = (DefaultTableModel) OrdTable.getModel();

            query = "DELETE FROM Orders WHERE Order_ID = '" + Order_ID + "';";
            try {
                ss.execute(query);
                ordTable.removeRow(OrdTable.getSelectedRow());
            } catch (SQLException ex) {
                Logger.getLogger(Orders.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select an Order");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        try {
            // TODO add your handling code here:
            Login.con.close();
            dispose();
            Login L = new Login();
            L.setVisible(true);
            System.out.println("Database disconnected");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddLocation;
    private javax.swing.JPanel BG;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Done;
    public static javax.swing.JTable OrdTable;
    private javax.swing.JScrollPane OrdTable_SP;
    private javax.swing.JLabel Title;
    private javax.swing.JButton cmdBack;
    // End of variables declaration//GEN-END:variables
}
